/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sampleavro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyAvro\",\"namespace\":\"sampleavro\",\"fields\":[{\"name\":\"number\",\"type\":\"long\"},{\"name\":\"stringOrNull\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long number;
  @Deprecated public java.lang.CharSequence stringOrNull;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public MyAvro() {}

  /**
   * All-args constructor.
   */
  public MyAvro(java.lang.Long number, java.lang.CharSequence stringOrNull) {
    this.number = number;
    this.stringOrNull = stringOrNull;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return stringOrNull;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = (java.lang.Long)value$; break;
    case 1: stringOrNull = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'number' field.
   */
  public java.lang.Long getNumber() {
    return number;
  }

  /**
   * Sets the value of the 'number' field.
   * @param value the value to set.
   */
  public void setNumber(java.lang.Long value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'stringOrNull' field.
   */
  public java.lang.CharSequence getStringOrNull() {
    return stringOrNull;
  }

  /**
   * Sets the value of the 'stringOrNull' field.
   * @param value the value to set.
   */
  public void setStringOrNull(java.lang.CharSequence value) {
    this.stringOrNull = value;
  }

  /** Creates a new MyAvro RecordBuilder */
  public static sampleavro.MyAvro.Builder newBuilder() {
    return new sampleavro.MyAvro.Builder();
  }
  
  /** Creates a new MyAvro RecordBuilder by copying an existing Builder */
  public static sampleavro.MyAvro.Builder newBuilder(sampleavro.MyAvro.Builder other) {
    return new sampleavro.MyAvro.Builder(other);
  }
  
  /** Creates a new MyAvro RecordBuilder by copying an existing MyAvro instance */
  public static sampleavro.MyAvro.Builder newBuilder(sampleavro.MyAvro other) {
    return new sampleavro.MyAvro.Builder(other);
  }
  
  /**
   * RecordBuilder for MyAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyAvro>
    implements org.apache.avro.data.RecordBuilder<MyAvro> {

    private long number;
    private java.lang.CharSequence stringOrNull;

    /** Creates a new Builder */
    private Builder() {
      super(sampleavro.MyAvro.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(sampleavro.MyAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stringOrNull)) {
        this.stringOrNull = data().deepCopy(fields()[1].schema(), other.stringOrNull);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MyAvro instance */
    private Builder(sampleavro.MyAvro other) {
            super(sampleavro.MyAvro.SCHEMA$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stringOrNull)) {
        this.stringOrNull = data().deepCopy(fields()[1].schema(), other.stringOrNull);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'number' field */
    public java.lang.Long getNumber() {
      return number;
    }
    
    /** Sets the value of the 'number' field */
    public sampleavro.MyAvro.Builder setNumber(long value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'number' field has been set */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'number' field */
    public sampleavro.MyAvro.Builder clearNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'stringOrNull' field */
    public java.lang.CharSequence getStringOrNull() {
      return stringOrNull;
    }
    
    /** Sets the value of the 'stringOrNull' field */
    public sampleavro.MyAvro.Builder setStringOrNull(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.stringOrNull = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'stringOrNull' field has been set */
    public boolean hasStringOrNull() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'stringOrNull' field */
    public sampleavro.MyAvro.Builder clearStringOrNull() {
      stringOrNull = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public MyAvro build() {
      try {
        MyAvro record = new MyAvro();
        record.number = fieldSetFlags()[0] ? this.number : (java.lang.Long) defaultValue(fields()[0]);
        record.stringOrNull = fieldSetFlags()[1] ? this.stringOrNull : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
